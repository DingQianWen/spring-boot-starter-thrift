package com.dqw.thrift.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.thrift.TBaseAsyncProcessor;
import org.apache.thrift.TMultiplexedProcessor;
import org.apache.thrift.TProcessor;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.server.TServer;
import org.apache.thrift.server.TThreadPoolServer;
import org.apache.thrift.transport.TServerSocket;
import org.apache.thrift.transport.TServerTransport;
import org.apache.thrift.transport.TTransportFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.lang.reflect.Constructor;
import java.util.Map;

/**
 * 〈一句话功能简述〉<br>
 * 〈〉
 *
 * @author 丁乾文
 * @create 2019/11/5
 * @since 1.0.0
 */
@Slf4j
@Component
@ConditionalOnBean(ThriftProviderProperties.class)
public class ThriftProviderListener implements ApplicationListener<ContextRefreshedEvent> {
    @Resource
    private ThriftProviderProperties thriftProviderProperties;
    private ApplicationContext applicationContext;

    /**
     * 当spring容器初始化完毕后,开始初始化Thrift
     *
     * @param contextRefreshedEvent contextRefreshedEvent
     */
    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        log.info("Ready to load Thrift!");
        this.applicationContext = contextRefreshedEvent.getApplicationContext();
        loadThrift();
    }

    /**
     * 启动时扫描所有的带@ThriftProvider的类
     */
    private void loadThrift() {
        try {
            //key:类首字母小写,value 对象
            Map<String, Object> beans = applicationContext.getBeansWithAnnotation(ThriftProvider.class);
            TServerTransport serverTransport = new TServerSocket(thriftProviderProperties.getPort());
            TMultiplexedProcessor processor = new TMultiplexedProcessor();
            for (Map.Entry<String, Object> bean : beans.entrySet()) {
                Class<?>[] interfaces = bean.getValue().getClass().getInterfaces();
                int count = 0;
                int index = -1;
                for (int i = 0; i < interfaces.length; i++) {
                    if (interfaces[i].getName().endsWith("$Iface")) {
                        index = i;
                        if (0 < count++) {
                            throw new RuntimeException(String.format("%s Can only implement one *.Iface interface", bean.getValue().getClass().getSimpleName()));

                        }
                    }
                }
                if (index == -1) {
                    throw new RuntimeException(String.format("%s Not implemented *.Iface interface", bean.getValue().getClass().getSimpleName()));
                }
                Class<?> anInterface = interfaces[index];
                String processorClassName = anInterface.getName().replace("Iface", "Processor");
                Class<?> aClass = Class.forName(processorClassName);
                Constructor<?> constructor = aClass.getDeclaredConstructors()[0];
                Object newInstance = constructor.newInstance(bean.getValue());
                if ((newInstance instanceof TBaseAsyncProcessor)) {
                    throw new RuntimeException(String.format("%s Not generated by Thrift", bean.getValue().getClass().getSimpleName()));
                }
                //服务名称,如果注解上name不为空,使用注解的name作为服务名称,否则使用默认类名首字母小写为服务名称
                ThriftProvider annotation = bean.getValue().getClass().getAnnotation(ThriftProvider.class);
                String serviceName;
                if (!"".equals(annotation.serviceName())) {
                    serviceName = annotation.serviceName();
                } else {
                    serviceName = bean.getKey();
                }
                log.info("Register thrift service,name:{}", serviceName);
                //注册服务接口
                processor.registerProcessor(serviceName, (TProcessor) newInstance);
            }
            TThreadPoolServer.Args processorArgs = new TThreadPoolServer.Args(serverTransport).processor(processor);
            processorArgs.protocolFactory(new TBinaryProtocol.Factory());
            processorArgs.transportFactory(new TTransportFactory());
            processorArgs.minWorkerThreads(thriftProviderProperties.getMinThreads());
            processorArgs.maxWorkerThreads(thriftProviderProperties.getMaxThreads());
            TServer server = new TThreadPoolServer(processorArgs);
            log.info("Thrift service started successfully,port:{}", thriftProviderProperties.getPort());
            server.serve();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}